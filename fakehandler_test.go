// Code generated by counterfeiter. DO NOT EDIT.
package muxrpc

import (
	context "context"
	sync "sync"
)

type FakeHandler struct {
	HandleCallStub        func(context.Context, *Request, Endpoint)
	handleCallMutex       sync.RWMutex
	handleCallArgsForCall []struct {
		arg1 context.Context
		arg2 *Request
		arg3 Endpoint
	}
	HandleConnectStub        func(context.Context, Endpoint)
	handleConnectMutex       sync.RWMutex
	handleConnectArgsForCall []struct {
		arg1 context.Context
		arg2 Endpoint
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) HandleCall(arg1 context.Context, arg2 *Request, arg3 Endpoint) {
	fake.handleCallMutex.Lock()
	fake.handleCallArgsForCall = append(fake.handleCallArgsForCall, struct {
		arg1 context.Context
		arg2 *Request
		arg3 Endpoint
	}{arg1, arg2, arg3})
	fake.recordInvocation("HandleCall", []interface{}{arg1, arg2, arg3})
	fake.handleCallMutex.Unlock()
	if fake.HandleCallStub != nil {
		fake.HandleCallStub(arg1, arg2, arg3)
	}
}

func (fake *FakeHandler) HandleCallCallCount() int {
	fake.handleCallMutex.RLock()
	defer fake.handleCallMutex.RUnlock()
	return len(fake.handleCallArgsForCall)
}

func (fake *FakeHandler) HandleCallCalls(stub func(context.Context, *Request, Endpoint)) {
	fake.handleCallMutex.Lock()
	defer fake.handleCallMutex.Unlock()
	fake.HandleCallStub = stub
}

func (fake *FakeHandler) HandleCallArgsForCall(i int) (context.Context, *Request, Endpoint) {
	fake.handleCallMutex.RLock()
	defer fake.handleCallMutex.RUnlock()
	argsForCall := fake.handleCallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHandler) HandleConnect(arg1 context.Context, arg2 Endpoint) {
	fake.handleConnectMutex.Lock()
	fake.handleConnectArgsForCall = append(fake.handleConnectArgsForCall, struct {
		arg1 context.Context
		arg2 Endpoint
	}{arg1, arg2})
	fake.recordInvocation("HandleConnect", []interface{}{arg1, arg2})
	fake.handleConnectMutex.Unlock()
	if fake.HandleConnectStub != nil {
		fake.HandleConnectStub(arg1, arg2)
	}
}

func (fake *FakeHandler) HandleConnectCallCount() int {
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	return len(fake.handleConnectArgsForCall)
}

func (fake *FakeHandler) HandleConnectCalls(stub func(context.Context, Endpoint)) {
	fake.handleConnectMutex.Lock()
	defer fake.handleConnectMutex.Unlock()
	fake.HandleConnectStub = stub
}

func (fake *FakeHandler) HandleConnectArgsForCall(i int) (context.Context, Endpoint) {
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	argsForCall := fake.handleConnectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleCallMutex.RLock()
	defer fake.handleCallMutex.RUnlock()
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ = new(FakeHandler)
